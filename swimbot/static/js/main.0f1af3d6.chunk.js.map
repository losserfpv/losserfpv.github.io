{"version":3,"sources":["BLE.js","App.js","serviceWorker.js","index.js"],"names":["serviceUuid","BLE","props","state","device","name","connected","value","errorMessage","characteristicEvent","bind","voltageChangeEvent","event","target","getUint8","console","log","Object","assign","this","setState","voltage","options","filters","push","namePrefix","optionalServices","navigator","bluetooth","requestDevice","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","speedCharacteristic","yawCharacteristic","voltageCharacteristic","startNotifications","addEventListener","undefined","encoder","TextEncoder","sendMsg","encode","writeValue","message","hide","display","className","onClick","connectClick","style","toggleClick","speedClick","yawClick","Component","App","test","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0f1af3d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst serviceUuid = '3d141840-50aa-4b98-a0c0-69f77101eb42';\r\nconst characteristicUuid = '117e6bd1-7c1a-4a8f-9c8f-a39f385a46b1';\r\nconst speedCharacteristicUuid = '1b6e1945-70df-4fe6-93ac-41b38c687703';\r\nconst yawCharacteristicUuid = '1461424d-1e9d-4eb2-a00b-08cfc7982954';\r\nconst voltageCharacteristicUuid = 'c8360fa3-3692-4291-ac0f-41503b0c1f30';\r\n\r\nclass BLE extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            device: {name: \"none\"},\r\n            connected: false,\r\n            value: -1,\r\n            errorMessage: \"no errors\"\r\n        }\r\n\r\n        this.characteristicEvent = this.characteristicEvent.bind(this);\r\n        this.voltageChangeEvent = this.voltageChangeEvent.bind(this);\r\n    }\r\n\r\n    characteristicEvent(event)\r\n    {\r\n        \r\n        let value = event.target.value.getUint8(0);\r\n        console.log(\"Value changed \" + value);\r\n        let newState = Object.assign({}, this.state);\r\n        newState.value = value;\r\n        this.setState(\r\n            {\r\n                value: value\r\n            }\r\n        )\r\n    }\r\n\r\n    voltageChangeEvent(event)\r\n    {\r\n        let value = event.target.value.getUint8(0);\r\n        let voltage = value / 100\r\n        console.log(\"Voltage: \" + voltage);\r\n\r\n        this.setState(\r\n            {\r\n                voltage: voltage\r\n            }\r\n        )\r\n    }\r\n\r\n    async connectClick()\r\n    {\r\n        let device;\r\n        let filters = [];\r\n        let options = {};\r\n        let characteristic;\r\n        let speedCharacteristic;\r\n        let yawCharacteristic;\r\n        let voltageCharacteristic;\r\n        let connected = true;\r\n\r\n        //options.acceptAllDevices = true;\r\n        filters.push({namePrefix: \"SwimBot\"});\r\n        options.filters = filters;\r\n        options.optionalServices = [serviceUuid];\r\n    \r\n        try {\r\n            device = await navigator.bluetooth.requestDevice(options);\r\n    \r\n            const server = await device.gatt.connect();\r\n            const service = await server.getPrimaryService(serviceUuid);\r\n            characteristic = await service.getCharacteristic(characteristicUuid);\r\n            speedCharacteristic = await service.getCharacteristic(speedCharacteristicUuid);\r\n            yawCharacteristic = await service.getCharacteristic(yawCharacteristicUuid);\r\n            voltageCharacteristic = await service.getCharacteristic(voltageCharacteristicUuid);\r\n            connected = true;\r\n\r\n            await characteristic.startNotifications();\r\n            characteristic.addEventListener(\"characteristicvaluechanged\", this.characteristicEvent);\r\n\r\n            await voltageCharacteristic.startNotifications();\r\n            voltageCharacteristic.addEventListener(\"characteristicvaluechanged\", this.voltageChangeEvent);\r\n        }\r\n        catch (error) {\r\n            console.log('Argh! ' + error);\r\n            this.setState(\r\n                {\r\n                    errorMessage: \"ERROR: \" + error\r\n                }\r\n            );\r\n            connected = false;\r\n        }\r\n\r\n        if(device === undefined)\r\n        {\r\n            device = {name: \"none\"};\r\n            connected = false;\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                device: device,\r\n                characteristic: characteristic,\r\n                speedCharacteristic: speedCharacteristic,\r\n                yawCharacteristic: yawCharacteristic,\r\n                connected: connected\r\n            }\r\n        )\r\n    \r\n    }\r\n\r\n    async toggleClick()\r\n    {\r\n        let device = this.state.device;\r\n        let characteristic = this.state.characteristic;\r\n\r\n        if(device.name !== \"none\")\r\n        {\r\n            let encoder = new TextEncoder('utf-8');\r\n            let sendMsg = encoder.encode(\"blue\");\r\n            characteristic.writeValue(sendMsg);\r\n        }\r\n    }\r\n\r\n    async speedClick(message)\r\n    {\r\n        let device = this.state.device;\r\n        let characteristic = this.state.speedCharacteristic;\r\n\r\n        if(device.name !== \"none\")\r\n        {\r\n            let encoder = new TextEncoder('utf-8');\r\n            let sendMsg = encoder.encode(message);\r\n            characteristic.writeValue(sendMsg);\r\n        }\r\n    }\r\n\r\n    async yawClick(message)\r\n    {\r\n        let device = this.state.device;\r\n        let characteristic = this.state.yawCharacteristic;\r\n\r\n        if(device.name !== \"none\")\r\n        {\r\n            let encoder = new TextEncoder('utf-8');\r\n            let sendMsg = encoder.encode(message);\r\n            characteristic.writeValue(sendMsg);\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        let hide = {\r\n            display: this.state.connected ? 'block' : 'none'\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>SwimBot</h1>\r\n                <button className=\"button\" onClick={() => this.connectClick()}>Connect</button>\r\n                <div>{this.state.errorMessage}</div>\r\n                <div style={hide}>\r\n                    <h2>Connected to : {this.state.device.name}</h2>\r\n                    <button className=\"button\" onClick={() => this.toggleClick()}>Toggle led</button><br />\r\n                    <h3>Speed:</h3>\r\n                    <button className=\"button\" onClick={() => this.speedClick(\"min\")}>-</button>\r\n                    <button className=\"button\" onClick={() => this.speedClick(\"stop\")}>Stop</button>\r\n                    <button className=\"button\" onClick={() => this.speedClick(\"plus\")}>+</button><br />\r\n                    <h3>Direction:</h3>\r\n                    <button className=\"button\" onClick={() => this.yawClick(\"-45\")}>&lt;</button>\r\n                    <button className=\"button\" onClick={() => this.yawClick(\"0\")}>^</button>\r\n                    <button className=\"button\" onClick={() => this.yawClick(\"45\")}>></button>\r\n                    <div><p>Value received: {this.state.value}</p></div>\r\n                    <div><p>Voltage: {this.state.voltage}</p></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default BLE;","import React from 'react';\nimport BLE from './BLE';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BLE test=\"1\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}